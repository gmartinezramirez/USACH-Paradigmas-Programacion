#lang racket

;; Filter y Map esta definido internamente en Scheme. 
;; Pero si les dicen que se debe implementar, deben implementar los siguientes codigos
(define (mi-filtro pred lista)
  (cond
    [(null? lista) '()]
    [(pred (car lista))
     (cons (car lista) (mi-filtro pred (cdr lista)))]
    [else
     (mi-filtro pred (cdr lista))]))


;; Descripción: Función que aplica una función fn a todos y cada uno de los elementos
;;              de una lista lst
;; Dom: Función a aplicar a una colección de datos <función>,
;;      Lista de datos <lista>
;; Rec: Nueva lista con cada elemento
;; Tipo de recursión: Natural
(define (mi-map funcion lista)
  (cond
    [(null? lista) null]
    [else
     (cons (funcion (car lista))
           (mi-map funcion (cdr lista)))]))